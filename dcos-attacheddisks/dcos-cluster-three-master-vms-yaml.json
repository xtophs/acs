{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentCount": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "agentVMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A9",
        "Standard_A10",
        "Standard_A11",
        "Standard_D1",
        "Standard_D2",
        "Standard_D3",
        "Standard_D4",
        "Standard_D11",
        "Standard_D12",
        "Standard_D13",
        "Standard_D14",
        "Standard_D1_v2",
        "Standard_D2_v2",
        "Standard_D3_v2",
        "Standard_D4_v2",
        "Standard_D5_v2",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_DS1",
        "Standard_DS2",
        "Standard_DS3",
        "Standard_DS4",
        "Standard_DS11",
        "Standard_DS12",
        "Standard_DS13",
        "Standard_DS14",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS5"
      ],
      "defaultValue": "Standard_D2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "disablePasswordAuthentication": {
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      },
      "type": "bool"
    },
    "enableNewStorageAccountNaming": {
      "defaultValue": true,
      "metadata": {
        "description": "If true: uses DNS name prefix + Orchestrator name + Region to create storage account name to reduce name collision probability. If false: uses DNS name prefix + Orchestrator name to create storage account name to maintain template idempotency."
      },
      "type": "bool"
    },
    "enableVMDiagnostics": {
      "defaultValue": true,
      "metadata": {
        "description": "Allows user to enable/disable boot & vm diagnostics."
      },
      "type": "bool"
    },
    "isValidation": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "This is testing in the validation region"
      },
      "type": "int"
    },
    "jumpboxEndpointDNSNamePrefix": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "linuxAdminPassword": {
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      },
      "type": "securestring"
    },
    "linuxAdminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "linuxOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxPublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      },
      "type": "string"
    },
    "linuxSku": {
      "defaultValue": "16.04.0-LTS",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      },
      "type": "string"
    },
    "linuxVersion": {
      "defaultValue": "16.04.201608300",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      },
      "type": "string"
    },
    "masterCount": {
      "allowedValues": [
        1,
        3,
        5
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos masters for the cluster."
      },
      "type": "int"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "nameSuffix": {
      "defaultValue": "01234567",
      "metadata": {
        "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
      },
      "type": "string"
    },
    "postInstallScriptURI": {
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      },
      "type": "string"
    },
    "setLinuxConfigurationForVMCreate": {
      "allowedValues": [
        0,
        1
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      },
      "type": "int"
    },
    "sshRSAPublicKey": {
      "defaultValue": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuxXmfo3ut0echPNekpU9pt32uxTQwex90LQr529BHHa5oCbgByqaZOQCEmuWlsHXJWp+pTlwutsxgLua9Q5iH6JEiKKiJjUsZ6a5bxHakmJdRS0LVwP+mxnf1ifXl0wRqLcS1Qi4SConfsufrges4hMM2KTN2YoAaQ2B4+vHpDJR9LuxJ9zhQnQRLQcAUdaFUmEHBhjLSpIzlEodL8DDHegEXGt/2RAlUxjhRLboDeUUk4VvIToejnxv/3m9yt7qkFGOFGsoJhpT7GUMhDm01rVEZHNZr86dC/gsz8eW+fc+wcUO4tV+2qeCR7dlLEMdChDe09zsId+Btg60yNb+R cschittk@csc-carbon",
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "vmsPerStorageAccount": {
      "defaultValue": 10,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      },
      "type": "int"
    },
    "windowsAdminPassword": {
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Windows Virtual Machine."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Windows Virtual Machine (Password Only Supported)."
      },
      "type": "string"
    },
    "windowsJumpboxOffer": {
      "defaultValue": "VisualStudio",
      "metadata": {
        "description": "This is the windows offer used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxPublisher": {
      "defaultValue": "MicrosoftVisualStudio",
      "metadata": {
        "description": "This is the windows publisher used by the windows"
      },
      "type": "string"
    },
    "windowsJumpboxSku": {
      "defaultValue": "VS-2015-Enterprise-AzureSDK-2.7-WS2012R2",
      "metadata": {
        "description": "This is the windows sku used by the windows"
      },
      "type": "string"
    }
  },
  "variables": {
    "DcosImageCommit": "92d61c576b3fe0dd1b8b15e7695b55ff7ce254fd",
    "TemplateGenerationDate": "2016-04-16 21:32:06.654230",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "adminPassword": "[parameters('linuxAdminPassword')]",
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "agentAddressPrefix": "10.0.0.0/8",
    "agentPrivateAvailabilitySet": "[concat(variables('orchestratorName'), '-priagent-availabilitySet-', variables('nameSuffix'))]",
    "agentPublicAvailabilitySet": "[concat(variables('orchestratorName'), '-pubagent-availabilitySet-', variables('nameSuffix'))]",
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentFirstAddr": 4,
    "agentPrivateAddressPrefix": "10.32.0.0/11",
    "agentPrivateCount": "[parameters('agentCount')]",
    "agentPrivateSubnetName": "[concat(variables('orchestratorName'), '-agentPrivateSubnet')]",
    "agentPrivateVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-private-', variables('nameSuffix'))]",
    "agentPrivateVMSSCount": 1,
    "agentPublicAddressPrefix": "10.0.0.0/11",
    "agentPublicCount": "[variables('agentPublicCountPerMasterCount')[string(variables('masterCount'))]]",
    "agentPublicCountPerMasterCount": {
      "1": 1,
      "3": 3,
      "5": 3
    },
    "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentPublicSubnetName": "[concat(variables('orchestratorName'), '-agentPublicSubnet')]",
    "agentPublicVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-public-', variables('nameSuffix'))]",
    "agentPublicVMSSCount": 1,
    "agentStorageAccountsCount": "[add(div(variables('agentPrivateCount'), variables('vmsPerStorageAccount')), mod(add(mod(variables('agentPrivateCount'), variables('vmsPerStorageAccount')),2), add(mod(variables('agentPrivateCount'), variables('vmsPerStorageAccount')),1)))]",
    "agentStoragePrivateAccountName": "[concat(variables('storageAccountBaseName'), 'agntpri')]",
    "agentStoragePrivateDataAccountName": "[concat(variables('storageAccountBaseName'), 'pridata')]",
    "agentStoragePublicAccountName": "[concat(variables('storageAccountBaseName'), 'agntpub')]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "agentsPerIPv4Octet": 200,
    "agentsPublicLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
    "agentsPublicLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsPublicLbName'))]",
    "agentsPublicLbIPConfigID": "[concat(variables('agentsPublicLbID'),'/frontendIPConfigurations/', variables('agentsPublicLbIPConfigName'))]",
    "agentsPublicLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
    "agentsPublicLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionStorage": "2015-06-15",
    "chronosEnabled": true,
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddr'), ' ',variables('swarmEnabled'),' ',variables('marathonEnabled'),' ',variables('chronosEnabled'),' ',variables('omsStorageAccount'),' ',variables('omsStorageAccountKey'),' ', variables('adminUsername'),' ',variables('postInstallScriptURI'))]",
    "deployEnvironment": "acs",
    "diagnosticsStorageAccountName": "[concat(variables('storageAccountBaseName'), 'diag', '0')]",
    "diagnosticsStorageAccountName-false": "",
    "diagnosticsStorageAccountName-true": "[variables('diagnosticsStorageAccountName')]",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
    "enableNewStorageAccountNaming": "[parameters('enableNewStorageAccountNaming')]",
    "enableVMDiagnostics": "[parameters('enableVMDiagnostics')]",
    "isValidation": "[parameters('isValidation')]",
    "linuxConfiguration": "[variables('linuxConfigurations')[variables('setLinuxConfigurationForVMCreate')]]",
    "linuxConfigurations": [
      {},
      {
        "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
        "ssh": {
          "publicKeys": [
            {
              "keyData": "[variables('sshRSAPublicKey')]",
              "path": "[variables('sshKeyPath')]"
            }
          ]
        }
      }
    ],
    "linuxOffer": "[parameters('linuxOffer')]",
    "linuxPublisher": "[parameters('linuxPublisher')]",
    "linuxSku": "[parameters('linuxSku')]",
    "linuxVersion": "[parameters('linuxVersion')]",
    "marathonEnabled": true,
    "masterAddressPrefix": "172.16.0.0/24",
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterCount": 3,
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterFirstAddr": 5,
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "masterSizes": [
      "Standard_D2",
      "Standard_A1"
    ],
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), 'mstr0')]",
    "masterSubnetName": "[concat(variables('orchestratorName'), '-masterSubnet')]",
    "masterSubnetRef": "[concat(variables('vnetID'),'/subnets/',variables('masterSubnetName'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNic": [
      "[concat(variables('masterVMNamePrefix'), 'nic-0')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-1')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-2')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-3')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-4')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-5')]",
      "[concat(variables('masterVMNamePrefix'), 'nic-6')]"
    ],
    "masterVMSize": "[variables('masterSizes')[variables('isValidation')]]",
    "nameSuffix": "[parameters('nameSuffix')]",
    "oauthEnabled": "false",
    "omsStorageAccount": "none",
    "omsStorageAccountKey": "none",
    "orchestratorName": "dcos",
    "osImageOffer": "[variables('linuxOffer')]",
    "osImagePublisher": "[variables('linuxPublisher')]",
    "osImageSKU": "[variables('linuxSku')]",
    "osImageVersion": "[variables('linuxVersion')]",
    "postInstallScriptURI": "[parameters('postInstallScriptURI')]",
    "setBrowserFirstTabDefaultPrefix": "powershell.exe -ExecutionPolicy Unrestricted -command \"New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer' ; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' -Name IntranetCompatibilityMode -Value 0 -Type DWord; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' -Name 'Start Page' -Type String -Value http://\"",
    "setBrowserFirstTabDefaultSuffix": "0:5050",
    "setLinuxConfigurationForVMCreate": "[parameters('setLinuxConfigurationForVMCreate')]",
    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "[uniqueString(concat(variables('masterEndpointDNSNamePrefix'),variables(concat('storageAccountBaseNameNewSuffix', '-', variables('enableNewStorageAccountNaming'))), variables('orchestratorName')))]",
    "storageAccountBaseNameNewSuffix-false": "",
    "storageAccountBaseNameNewSuffix-true": "[resourceGroup().location]",
    "dataStorageAccountPrefixSeed": 97,
    "storageAccountPrefixes": [
      "0",
      "6",
      "c",
      "i",
      "o",
      "u",
      "1",
      "7",
      "d",
      "j",
      "p",
      "v",
      "2",
      "8",
      "e",
      "k",
      "q",
      "w",
      "3",
      "9",
      "f",
      "l",
      "r",
      "x",
      "4",
      "a",
      "g",
      "m",
      "s",
      "y",
      "5",
      "b",
      "h",
      "n",
      "t",
      "z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "storageAccountType": "Standard_LRS",
    "storageLocation": "[variables('storageLocations')[variables('isValidation')]]",
    "storageLocations": [
      "[resourceGroup().location]",
      "East US 2 (Stage)"
    ],
    "swarmEnabled": false,
    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vmSizesMap": {
      "Standard_A0": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A10": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A6": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A7": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A8": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_A9": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D11_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D12_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D13_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D14_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D1_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D2_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D3_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D4_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_D5_v2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_DS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS11": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS12": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS13": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS14": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_DS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_G1": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G2": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G3": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G4": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_G5": {
        "storageAccountType": "Standard_LRS"
      },
      "Standard_GS1": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS2": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS3": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS4": {
        "storageAccountType": "Premium_LRS"
      },
      "Standard_GS5": {
        "storageAccountType": "Premium_LRS"
      }
    },
    "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "wadcfgxstart": "[concat(variables('wadlogs'),variables(concat('wadperfcounters1','-',variables('enableVMDiagnostics'))),variables(concat('wadperfcounters2','-',variables('enableVMDiagnostics'))),'<Metrics resourceId=\"')]",
    "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "wadperfcounters1-false": "",
    "wadperfcounters1-true": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2-false": "",
    "wadperfcounters2-true": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "dataStorageAccountPrefixSeed": 97,
    "bla1": "#cloud-config\n\nbootcmd:\n- bash -c \"if [ ! -f /var/lib/sdb-gpt ];then echo DCOS-5890;parted -s /dev/sdb mklabel\n    gpt;touch /var/lib/sdb-gpt;fi\"\n\npackages: [\"mdadm\"]\n\ndisk_setup:\n    ephemeral0:\n        layout:\n        - 50\n        - 50\n        overwrite: true\n        table_type: gpt\n    /dev/sdc:\n       table_type: gpt\n       layout: true\n       overwrite: true\n\n    /dev/sdd:\n       table_type: gpt\n       layout: true\n       overwrite: true\nfs_setup:\n-   device: ephemeral0.1\n    filesystem: ext4\n    overwrite: true\n-   device: ephemeral0.2\n    filesystem: ext4\n    overwrite: true\nmounts:\n-   - ephemeral0.1\n    - /var/lib/mesos\n-   - ephemeral0.2\n    - /var/lib/docker\n-   - //xtophvznmount.file.core.windows.net/vznfiles\n    - /remote\n    - cifs\n    - vers=3.0,username=xtophvznmount,password=pOAFbxqKtCW3pX67ziKvhL8OgMpDlu8AwVhj4OD4g7L85IHtAjYoRDVBxnN6w+T13noW+6zR1oifRmSQJMH9Xg==,dir_mode=0777,file_mode=0777\n\nruncmd:\n-   - ln\n    - -s\n    - /bin/rm\n    - /usr/bin/rm\n-   - ln\n    - -s\n    - /bin/mkdir\n    - /usr/bin/mkdir\n-   - ln\n    - -s\n    - /bin/tar\n    - /usr/bin/tar\n-   - ln\n    - -s\n    - /bin/ln\n    - /usr/bin/ln\n-   - ln\n    - -s\n    - /bin/cp\n    - /usr/bin/cp\n-   - ln\n    - -s\n    - /bin/systemctl\n    - /usr/bin/systemctl\n-   - ln\n    - -s\n    - /bin/mount\n    - /usr/bin/mount\n-   - ln\n    - -s\n    - /bin/bash\n    - /usr/bin/bash\n-   - mount\n    - -a\n-   - mkdir\n    - -p\n    - /dcos/volume0\n-   - mdadm\n    - \"--create\" \n    - /dev/md127 \n    - \"--level=0\" \n    - \"--raid-devices\" \n    - 2 \n    - /dev/sdc1 \n    - /dev/sdd1\n-   - mkfs\n    - -t\n    - ext4\n    - /dev/md127\n- echo UUID=$(sudo /sbin/blkid | grep md127 | cut -d\\\" -f 2) /dcos/volume0 ext4 defaults 0 2 >> /etc/fstab\n-   - mount\n    - -a\n-   - chmod\n    - 777\n    - /dcos/volume0\n-   - systemctl\n    - stop\n    - resolvconf.service\n-   - systemctl\n    - disable\n    - resolvconf.service\n-   - systemctl\n    - stop\n    - lxc-net.service\n-   - systemctl\n    - disable\n    - lxc-net.service\n-   - systemctl\n    - mask\n    - lxc-net.service\n- curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/1.deb https://az837203.vo.msecnd.net/dcos-deps/libipset3_6.29-1_amd64.deb\n- curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/2.deb https://az837203.vo.msecnd.net/dcos-deps/ipset_6.29-1_amd64.deb\n- curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/3.deb https://az837203.vo.msecnd.net/dcos-deps/unzip_6.0-20ubuntu1_amd64.deb\n- curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/4.deb https://az837203.vo.msecnd.net/dcos-deps/libltdl7_2.4.6-0.1_amd64.deb\n- bash -c \"try=1;until dpkg -i /tmp/{1,2,3,4}.deb || ((try>9));do echo retry \\$((try++));sleep\n    \\$((try*try));done\"\n-   - cp\n    - -p\n    - /etc/resolv.conf\n    - /tmp/resolv.conf\n-   - rm\n    - -f\n    - /etc/resolv.conf\n-   - cp\n    - -p\n    - /tmp/resolv.conf\n    - /etc/resolv.conf\n-   - systemctl\n    - start\n    - dcos-docker-install.service\n-   - systemctl\n    - start\n    - dcos-link-env.service\n-   - systemctl\n    - start\n    - dcos-download.service\n-   - systemctl\n    - start\n    - dcos-setup.service\n-   - systemctl\n    - start\n    - dcos-config-writer.service\nwrite_files:\n-   content: https://az837203.vo.msecnd.net/dcos/testing\n    owner: root\n    path: /etc/mesosphere/setup-flags/repository-url\n    permissions: '0644'\n-   content: BOOTSTRAP_ID=df308b6fc3bd91e1277baa5a3db928ae70964722\n    owner: root\n    path: /etc/mesosphere/setup-flags/bootstrap-id\n    permissions: '0644'\n-   content: '[\"dcos-config--setup_6af5097e7956962a3d4318d28fbf280a47305485\", \"dcos-metadata--setup_6af5097e7956962a3d4318d28fbf280a47305485\"]'\n    owner: root\n    path: /etc/mesosphere/setup-flags/cluster-packages.json\n    permissions: '0644'\n-   content: |\n        [Journal]\n        MaxLevelConsole=warning\n    owner: root\n    path: /etc/systemd/journald.conf.d/dcos.conf\n    permissions: '0644'\n-   content: '",
    "bla2": "'\n    path: /etc/mesosphere/cluster-id\n    permissions: '0644'\n-   content: |\n      rexray:\n        loglevel: info\n        modules:\n          default-docker:\n            disabled: true\n\n    path: /etc/rexray/config.yml\n    permissions: '0644'\n-   content:  |\n        [Unit]\n        Before=dcos.target\n        [Service]\n        Type=oneshot\n        StandardOutput=journal+console\n        StandardError=journal+console\n        ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n        ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n\n    path: /etc/systemd/system/dcos-link-env.service\n    permissions: '0644'\n-   content: |\n        [Unit]\n        After=network-online.target\n        Wants=network-online.target\n        ConditionPathExists=!/opt/mesosphere/\n        [Service]\n        EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n        Type=oneshot\n        StandardOutput=journal+console\n        StandardError=journal+console\n        ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz         https://az837203.vo.msecnd.net/dcos/testing/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n        ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n        ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n        ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n\n    path: /etc/systemd/system/dcos-download.service\n    permissions: '0644'\n-   content: |\n        [Unit]\n        Requires=dcos-download.service\n        After=dcos-download.service\n        [Service]\n        Type=oneshot\n        StandardOutput=journal+console\n        StandardError=journal+console\n        EnvironmentFile=/opt/mesosphere/environment\n        ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n        [Install]\n        WantedBy=multi-user.target\n\n    path: /etc/systemd/system/dcos-setup.service\n    permissions: \"0644\"\n-   content: |\n        [Unit]\n        After=network-online.target\n        Wants=network-online.target\n        [Service]\n        Type=oneshot\n        Environment=DEBIAN_FRONTEND=noninteractive\n        StandardOutput=journal+console\n        StandardError=journal+console\n        ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/d.deb https://az837203.vo.msecnd.net/dcos-deps/docker-engine_1.11.2-0~xenial_amd64.deb\n        ExecStart=/usr/bin/bash -c \"try=1;until dpkg -D3 -i /tmp/d.deb || ((try>9));do echo retry $((try++));sleep $((try*try));done;systemctl --now start docker;systemctl restart docker.socket\"\n\n    path: /etc/systemd/system/dcos-docker-install.service\n    permissions: '0644'\n-   content: |\n        [Service]\n        Restart=always\n        StartLimitInterval=0\n        RestartSec=15\n        ExecStart=\n        ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay\n\n    path: /etc/systemd/system/docker.service.d/execstart.conf\n    permissions: '0644'\n-   content: |\n        [Unit]\n        PartOf=docker.service\n        [Socket]\n        ListenStream=/var/run/docker.sock\n        SocketMode=0660\n        SocketUser=root\n        SocketGroup=docker\n        ListenStream=2375\n        BindIPv6Only=both\n        [Install]\n        WantedBy=sockets.target\n\n    path: /etc/systemd/system/docker.socket\n    permissions: \"0644\"\n-   content: |\n        [Unit]\n        Requires=dcos-setup.service\n        After=dcos-setup.service\n        [Service]\n        Type=oneshot\n        EnvironmentFile=/etc/environment\n        EnvironmentFile=/opt/mesosphere/environment\n        ExecStart=/usr/bin/bash -c \"echo -e $(detect_ip) $(hostname) >> /etc/hosts\"\n\n    path: /etc/systemd/system/dcos-config-writer.service\n    permissions: '0644'\n-   content: MESOS_CLUSTER=",
    "bla3": "\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/mesos-master-provider\n-   content: ADMINROUTER_ACTIVATE_AUTH_MODULE=false\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/adminrouter.env\n-   content: '[",
    "bla4": "]'\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/master_list\n-   content: |\n        EXHIBITOR_BACKEND=AZURE\n        AZURE_CONTAINER=dcos-exhibitor\n        AZURE_PREFIX=",
    "bla5": "\n\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor\n-   content: |\n      com.netflix.exhibitor.azure.account-name=",
    "bla6": "\n      com.netflix.exhibitor.azure.account-key=",
    "bla7": "\n\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/exhibitor.properties\n-   content: '{\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\":\n        {\"enabled\": false},\n        \"authentication\":{\"enabled\":false},\n        \"oauth\":{\"enabled\":false,\"authHost\":\"https://dcos.auth0.com\"},\n        \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":false}}}}'\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/etc/ui-config.json\n-   content: '{}'\n    path: /etc/mesosphere/setup-packages/dcos-provider-azure--setup/pkginfo.json\n",
    "masterRoles": "-   content: ''\n    path: /etc/mesosphere/roles/master\n-   content: ''\n    path: /etc/mesosphere/roles/azure_master\n-   content: ''\n    path: /etc/mesosphere/roles/azure\n...\n",
    "agentPrivateRoles": "-   content: ''\n    path: /etc/mesosphere/roles/slave\n-   content: ''\n    path: /etc/mesosphere/roles/azure\n...\n",
    "agentPublicRoles": "-   content: ''\n    path: /etc/mesosphere/roles/slave_public\n-   content: ''\n    path: /etc/mesosphere/roles/azure\n...\n"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[variables('masterStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[variables('diagnosticsStorageAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('masterVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('virtualNetworkName')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('masterAddressPrefix')]",
            "[variables('agentAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('masterSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('masterAddressPrefix')]"
            }
          },
          {
            "name": "[variables('agentPublicSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentPublicAddressPrefix')]"
            }
          },
          {
            "name": "[variables('agentPrivateSubnetName')]",
            "properties": {
              "addressPrefix": "[variables('agentPrivateAddressPrefix')]"
            }
          }
        ]
      },
      "type": "Microsoft.Network/virtualNetworks"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {},
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[copyIndex(2200)]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ],
              "privateIPAddress": "[concat(split(variables('masterAddressPrefix'),'0/24')[0], copyIndex(variables('masterFirstAddr')))]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('masterSubnetRef')]"
              }
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('agentPrivateVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicAgentLoopNode",
        "count": "[variables('agentPrivateCount')]"
      },
      "dependsOn": [
        "[variables('vnetID')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('agentPrivateAddressPrefix'),'0.0/11')[0], div(copyIndex(),variables('agentsPerIPv4Octet')), '.', add(mod(copyIndex(),variables('agentsPerIPv4Octet')), variables('agentFirstAddr')))]",
              "subnet": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPrivateSubnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('agentPublicVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicAgentLoopNode",
        "count": "[variables('agentPublicCount')]"
      },
      "dependsOn": [
        "[variables('agentsPublicLbID')]",
        "[variables('vnetID')]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('agentPublicAddressPrefix'),'0.0/11')[0], div(copyIndex(),variables('agentsPerIPv4Octet')), '.', add(mod(copyIndex(),variables('agentsPerIPv4Octet')), variables('agentFirstAddr')))]",
              "subnet": {
                "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('agentPublicSubnetName'))]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('agentsPublicLbName'), '/backendAddressPools/',variables('agentsPublicLbBackendPoolName'))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]",
        "[variables('diagnosticsStorageAccountName')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('enableVMDiagnostics')]",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('adminPassword')]",
          "adminUsername": "[variables('adminUsername')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "customData": "[base64(concat( variables('bla1'), variables( 'nameSuffix'), variables('bla2'), variables('masterPublicIPAddressName'), variables('bla3'), '\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\"', variables('bla4'), variables('masterPublicIPAddressName'), variables('bla5'),   variables('masterStorageAccountName'), variables('bla6'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountName')), '2015-06-15').key1, variables('bla7'), variables('masterRoles') ))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/',variables('masterStorageAccountName')),variables('apiVersionStorage')).primaryEndpoints.blob,'vhds/',variables('masterVMNamePrefix'),copyIndex(),'-osdisk.vhd')]"
            }
          },
          "dataDisks": [
            {
              "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-datadisk-0')]",
              "diskSizeGB": "128",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('masterVMNamePrefix'), copyIndex(), '--datadisk-0.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-datadisk-1')]",
              "diskSizeGB": "128",
              "lun": 1,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('masterVMNamePrefix'), copyIndex(), '--datadisk-1.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        }
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), sub(variables('masterCount'), 1), '/extensions/linuxdiagnostic')]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), sub(variables('masterCount'), 1), '/waitforleader')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "commandToExecute": "sh -c 'until ping -c1 leader.mesos;do echo waiting for leader.mesos;sleep 15;done;echo leader.mesos up'"
        },
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.4"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[variables('masterCount')]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', concat(variables('masterVMNamePrefix'), copyIndex()))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/linuxdiagnostic')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "storageAccountKey": "[listKeys(variables('accountid'),variables('apiVersionStorage')).key1]",
          "storageAccountName": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]"
        },
        "publisher": "Microsoft.OSTCExtensions",
        "settings": {
          "StorageAccount": "[variables(concat('diagnosticsStorageAccountName', '-', variables('enableVMDiagnostics')))]",
          "xmlCfg": "[base64(concat(variables('wadcfgxstart'), variables('masterVMNamePrefix'), copyIndex(), variables('wadcfgxend')))]"
        },
        "type": "LinuxDiagnostic",
        "typeHandlerVersion": "2.3"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[variables('agentStoragePublicAccountName')]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[resourceGroup().location]",
      "name": "[variables('agentPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('agentsPublicLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('agentsPublicLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentsPublicLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
              }
            }
          }
        ],
        "inboundNatRules": [],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTP",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 80,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 80,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpHTTPProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          },
          {
            "name": "LBRulePort8080",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('agentsPublicLbID'), '/backendAddressPools/', variables('agentsPublicLbBackendPoolName'))]"
              },
              "backendPort": 8080,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('agentsPublicLbIPConfigID')]"
              },
              "frontendPort": 8080,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsPublicLbID'),'/probes/tcpPort8080Probe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 80,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          },
          {
            "name": "tcpPort8080Probe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 8080,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentStorageAccountsCount')]",
        "name": "agentPrivateLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateAccountName'),copyIndex())]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('apiVersionStorage')]",
      "copy": {
        "count": "[variables('agentStorageAccountsCount')]",
        "name": "agentPrivateDataLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('storageLocation')]",
      "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(variables('dataStorageAccountPrefixSeed')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(variables('dataStorageAccountPrefixSeed')),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),copyIndex())]",
      "properties": {
        "accountType": "[variables('vmSizesMap')[variables('agentVMSize')].storageAccountType]"
      },
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('agentPrivateAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('agentPublicAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('agentPublicVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentPublicCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('agentStoragePublicAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentPublicVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentPublicAvailabilitySet'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentPublicAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('agentPublicVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64(concat( variables('bla1'), variables( 'nameSuffix'), variables('bla2'), variables('masterPublicIPAddressName'), variables('bla3'), '\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\"', variables('bla4'), variables('masterPublicIPAddressName'), variables('bla5'),   variables('masterStorageAccountName'), variables('bla6'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountName')), '2015-06-15').key1, variables('bla7'), variables('agentPublicRoles') ))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('agentPublicVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('agentStoragePublicAccountName'), '.blob.core.windows.net/vhds/', variables('agentPublicVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadOnly",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('agentPublicVMNamePrefix'), copyIndex(),'-datadisk-0')]",
              "diskSizeGB": "128",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('agentPublicVMNamePrefix'), copyIndex(), '--datadisk-0.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('agentPublicVMNamePrefix'), copyIndex(),'-datadisk-1')]",
              "diskSizeGB": "128",
              "lun": 1,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('agentPublicVMNamePrefix'), copyIndex(), '--datadisk-1.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentPublicVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('enableVMDiagnostics')]",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
          }
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('agentPrivateVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentPrivateCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentPrivateVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentPrivateAvailabilitySet'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentPrivateAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('agentPrivateVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64(concat( variables('bla1'), variables( 'nameSuffix'), variables('bla2'), variables('masterPublicIPAddressName'), variables('bla3'), '\"', reference(variables('masterVMNic')[0]).ipConfigurations[0].properties.privateIPAddress, '\"', variables('bla4'), variables('masterPublicIPAddressName'), variables('bla5'),   variables('masterStorageAccountName'), variables('bla6'), listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('masterStorageAccountName')), '2015-06-15').key1, variables('bla7'), variables('agentPrivateRoles') ))]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('agentPrivateVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('agentPrivateVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadOnly",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "[concat(variables('agentPrivateVMNamePrefix'), copyIndex(),'-datadisk-0')]",
              "diskSizeGB": "128",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('agentPrivateVMNamePrefix'), copyIndex(), '--datadisk-0.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "[concat(variables('agentPrivateVMNamePrefix'), copyIndex(),'-datadisk-1')]",
              "diskSizeGB": "128",
              "lun": 1,
              "vhd": {
                "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(add(variables('dataStorageAccountPrefixSeed'),div(copyIndex(),variables('vmsPerStorageAccount'))),variables('storageAccountPrefixesCount'))],variables('agentStoragePrivateDataAccountName'),div(copyIndex(),variables('vmsPerStorageAccount')), '.blob.core.windows.net/vhds/', variables('agentPrivateVMNamePrefix'), copyIndex(), '--datadisk-1.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentPrivateVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "[variables('enableVMDiagnostics')]",
            "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
          }
        }
      }
    }
  ],
  "outputs": {
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "diagnosticsStorageAccountUri": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName')), variables('apiVersionStorage')).primaryEndpoints.blob]"
    },
    "jumpboxFQDN": {
      "type": "string",
      "value": ""
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}